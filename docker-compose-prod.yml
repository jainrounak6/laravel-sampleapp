version: "3"
services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: ./docker/php/Prod.Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION:-latest}
        - NODE_VERSION=${NODE_VERSION:-latest}
    image: ${COMPOSE_PROJECT_NAME}-php:${PHP_VERSION:-latest}
    container_name: ${COMPOSE_PROJECT_NAME}-app
    restart: unless-stopped
    tty: true
    working_dir: /var/www/html
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app

  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME}-nginx
    restart: unless-stopped
    tty: true
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    depends_on:
      - app
    networks:
      - app

  # Mysql Service
  mysql:
    container_name: ${COMPOSE_PROJECT_NAME}-mysql
    image: mysql:${MYSQL_VERSION:-latest}
    restart: unless-stopped
    security_opt:
      - seccomp:unconfined
    volumes:
      - dbdata:/var/lib/mysql
      # Enable this if you want to restore any sql file and keep file on the same path.
      # - ./docker/mysql/:/docker-entrypoint-initdb.d/
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-default_db}
      MYSQL_USER: ${MYSQL_USER:-default_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-changeme}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_ALLOW_EMPTY_PASSWORD: ${MYSQL_ALLOW_EMPTY_PASSWORD:-no}
    healthcheck:
      test: mysqladmin ping -h localhost -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      interval: 2m
      timeout: 5m
      retries: 5
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - app

# Network
networks:
  app:
    driver: bridge

# Volumes
volumes:
  dbdata:
    driver: local
