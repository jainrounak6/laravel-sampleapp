                                          #### Techflitter Solutions ####

# This workflow will build a docker container, publish it to Google Container Registry (Asia region), and deploy it to GKE when code is pushed to master branch.
#
# To configure this workflow:
#
# 1. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key. Please visit offical documentation (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs). 
#
# 2. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables if needed (below).

name: Test Build and Deploy to GKE

on:
  push:
    branches:
    #- dev
     - master 

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: static-site-laravel         # TODO: update to cluster name
  GKE_ZONE: europe-west2                    # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test                # TODO: update to deployment name
  IMAGE: static-site

jobs:
  app-tests:
        runs-on: ubuntu-latest
        services:
          mysql:
            image: mysql:5.7
            env:
              MYSQL_ALLOW_EMPTY_PASSWORD: yes
              MYSQL_DATABASE: testdb
            ports:
              - 3306
        steps:
          - uses: actions/checkout@v2
          - name: Copy .env
            run: php -r "file_exists('.env') || copy('.env.example', '.env');"
          - name: Install Composer Dependencies
            run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
          - name: Generate Key
            run: php artisan key:generate
          - name: Execute tests (Unit and Feature tests) via PHPUnit
            env:
              DB_PORT: ${{ job.services.mysql.ports[3306] }}
            run: vendor/bin/phpunit tests/ 
                        
  publish-deploy:
    name: Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
#     - run: |-
#         gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "asia.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "asia.gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        
    - name: Create container
      run: |-
        gcloud container clusters create "$GKE_CLUSTER" \
        --zone europe-west2 \
        --num-nodes 1 \
        --machine-type n1-standard-2 \
        --cluster-version 1.15 \
        --service-account "$service_account_key"
         
     # Get the GKE credentials so we can deploy to the cluster
    - name: container creds 
      run: |-
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"       

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image asia.gcr.io/PROJECT_ID/IMAGE:TAG=asia.gcr.io/"$PROJECT_ID"/"$IMAGE":"$GITHUB_SHA"
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
